{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaabi\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Juntaaibank\\\\src\\\\contexts\\\\TransactionContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionContext = /*#__PURE__*/createContext();\nexport function TransactionProvider({\n  children\n}) {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const updateTransaction = async (transactionId, updates) => {\n    setTransactions(prevTransactions => {\n      const updatedTransactions = prevTransactions.map(t => t.id === transactionId ? {\n        ...t,\n        ...updates\n      } : t);\n      // Salvar no localStorage\n      localStorage.setItem('transactions', JSON.stringify(updatedTransactions));\n      return updatedTransactions;\n    });\n\n    // Emitir evento de atualização\n    window.dispatchEvent(new CustomEvent('transactionUpdated'));\n  };\n  const addTransaction = transaction => {\n    setTransactions(prev => [...prev, {\n      id: Date.now(),\n      status: 'pending',\n      date: new Date().toISOString().split('T')[0],\n      ...transaction\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      transactions,\n      addTransaction,\n      updateTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(TransactionProvider, \"Tz1qIkShCHvLh/M7ZupqdoMUajU=\");\n_c = TransactionProvider;\nexport function useTransactions() {\n  _s2();\n  const context = useContext(TransactionContext);\n  if (!context) {\n    throw new Error('useTransactions must be used within a TransactionProvider');\n  }\n  return context;\n}\n_s2(useTransactions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["createContext","useState","useContext","jsxDEV","_jsxDEV","TransactionContext","TransactionProvider","children","_s","transactions","setTransactions","updateTransaction","transactionId","updates","prevTransactions","updatedTransactions","map","t","id","localStorage","setItem","JSON","stringify","window","dispatchEvent","CustomEvent","addTransaction","transaction","prev","Date","now","status","date","toISOString","split","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTransactions","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/gaabi/OneDrive/Área de Trabalho/Juntaaibank/src/contexts/TransactionContext.jsx"],"sourcesContent":["import { createContext, useState, useContext } from 'react';\r\n\r\nconst TransactionContext = createContext();\r\n\r\nexport function TransactionProvider({ children }) {\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  const updateTransaction = async (transactionId, updates) => {\r\n    setTransactions(prevTransactions => {\r\n      const updatedTransactions = prevTransactions.map(t => \r\n        t.id === transactionId ? { ...t, ...updates } : t\r\n      );\r\n      // Salvar no localStorage\r\n      localStorage.setItem('transactions', JSON.stringify(updatedTransactions));\r\n      return updatedTransactions;\r\n    });\r\n\r\n    // Emitir evento de atualização\r\n    window.dispatchEvent(new CustomEvent('transactionUpdated'));\r\n  };\r\n\r\n  const addTransaction = (transaction) => {\r\n    setTransactions(prev => [...prev, {\r\n      id: Date.now(),\r\n      status: 'pending',\r\n      date: new Date().toISOString().split('T')[0],\r\n      ...transaction\r\n    }]);\r\n  };\r\n\r\n  return (\r\n    <TransactionContext.Provider value={{ transactions, addTransaction, updateTransaction }}>\r\n      {children}\r\n    </TransactionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTransactions() {\r\n  const context = useContext(TransactionContext);\r\n  if (!context) {\r\n    throw new Error('useTransactions must be used within a TransactionProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASM,mBAAmBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMU,iBAAiB,GAAG,MAAAA,CAAOC,aAAa,EAAEC,OAAO,KAAK;IAC1DH,eAAe,CAACI,gBAAgB,IAAI;MAClC,MAAMC,mBAAmB,GAAGD,gBAAgB,CAACE,GAAG,CAACC,CAAC,IAChDA,CAAC,CAACC,EAAE,KAAKN,aAAa,GAAG;QAAE,GAAGK,CAAC;QAAE,GAAGJ;MAAQ,CAAC,GAAGI,CAClD,CAAC;MACD;MACAE,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACP,mBAAmB,CAAC,CAAC;MACzE,OAAOA,mBAAmB;IAC5B,CAAC,CAAC;;IAEF;IACAQ,MAAM,CAACC,aAAa,CAAC,IAAIC,WAAW,CAAC,oBAAoB,CAAC,CAAC;EAC7D,CAAC;EAED,MAAMC,cAAc,GAAIC,WAAW,IAAK;IACtCjB,eAAe,CAACkB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAChCV,EAAE,EAAEW,IAAI,CAACC,GAAG,CAAC,CAAC;MACdC,MAAM,EAAE,SAAS;MACjBC,IAAI,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5C,GAAGP;IACL,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACEvB,OAAA,CAACC,kBAAkB,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,YAAY;MAAEiB,cAAc;MAAEf;IAAkB,CAAE;IAAAJ,QAAA,EACrFA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC;AAAChC,EAAA,CA/BeF,mBAAmB;AAAAmC,EAAA,GAAnBnC,mBAAmB;AAiCnC,OAAO,SAASoC,eAAeA,CAAA,EAAG;EAAAC,GAAA;EAChC,MAAMC,OAAO,GAAG1C,UAAU,CAACG,kBAAkB,CAAC;EAC9C,IAAI,CAACuC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,eAAe;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}